const _ = require('lodash');
const Path = require('path-parser').default;
const { URL } = require('url'); // built-in Node module
const mongoose = require('mongoose');
const requireLogin = require('../middlewares/requireLogin');
const requireCredits = require('../middlewares/requireCredits');
const Mailer = require('../services/Mailer');
const surveyTemplate = require('../services/emailTemplates/surveyTemplate');

const Survey = mongoose.model('surveys');

module.exports = app => {
  app.get('/api/surveys/thanks', (req, res) => {
    res.send('thanks for voting!');
  });

  app.post('/api/surveys/webhooks', (req, res) => {
    //console.log(req.body);

    // could do some es6 destructuring right here on 'event'. since we only need the 'email' and 'url' properties,
    // I could just pull those off the 'event' object. but I won't yet for readibility
    const events = req.body.map(event => {
      const pathname = new URL(event.url).pathname;
      const p = new Path('/api/surveys/:surveyId/:choice');
      //console.log(p.test(pathname));
      // this p.test(pathname) will return records that match both the wildcards above, surveyId and choice,
      // otherwise it will return NULL
      const match = p.test(pathname);
      // so if match here does exist, that means it MUST have the surveyId and the choice
      if (match) {
        return { email: event.email, surveyId: match.surveyId, choice: match.choice };
      }
    });

    //console.log(events);
    // vid:180 I need to remove undefined elements. this 'compact' underscore does that
    const compactEvents = _.compact(events);

    // I need to remove duplicate votes. this removes votes that have a dup email or surveyId
    const uniqueEvents = _.uniqBy(compactEvents, 'email', 'surveyId');

    console.log(uniqueEvents);
    // sendgrid thinks the requests are failing and will keep outputting in the terminal, until you send a  response
    res.send({});



  });

  app.post('/api/surveys', requireLogin, requireCredits, async (req, res) => {
    const { title, subject, body, recipients } = req.body;

    const survey = new Survey({
      title,
      subject,
      body,
      recipients: recipients.split(',').map(email => ({ email: email.trim() })),
      _user: req.user.id,
      dateSent: Date.now()
    });

    // send an email off to the Sengrid api by calling the send function on the Mailer parent class, and then after the async send finishes,
    // save to db. whenever you call save on req.user, that user is now 'stale', so have to create a new user variable
    const mailer = new Mailer(survey, surveyTemplate(survey));

    try {
      await mailer.send();
      await survey.save();
      req.user.credits -= 1;
      const user = await req.user.save();

      // send back the updated user
      res.send(user);
    } catch (err) {
      res.status(422).send(err);
    }
  });
};



// title, subject here is really title: title, subject: subject. new es6 syntax you can condense it
// down to one word.
// also doing the same for the mapped 'email' object, but to explicitly say that it's an object, wrap
// it in parentheses. trim() just removes whitespace if someone accidentally added some

// the _user means there it is a relationship property. the survey belongs to this user. and the
// req.user.id is generated by mongoose and mongo
