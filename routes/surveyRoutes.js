const _ = require('lodash');
const Path = require('path-parser').default;
const { URL } = require('url'); // built-in Node module
const mongoose = require('mongoose');
const requireLogin = require('../middlewares/requireLogin');
const requireCredits = require('../middlewares/requireCredits');
const Mailer = require('../services/Mailer');
const surveyTemplate = require('../services/emailTemplates/surveyTemplate');

const Survey = mongoose.model('surveys');

module.exports = app => {

  app.get('/api/surveys', requireLogin, async (req, res) => {
    const surveys = await Survey.find({ _user: req.user.id })
      .select({ recipients: false });

    res.send(surveys);
  });

  app.get('/api/surveys/:surveyId/:choice', (req, res) => {
    res.send('thanks for voting!');
  });

  app.post('/api/surveys/webhooks', (req, res) => {
    //console.log(req.body);
    const p = new Path('/api/surveys/:surveyId/:choice');

    // could do some es6 destructuring right here on 'event'. since we only need the 'email' and 'url' properties,
    // I could just pull those off the 'event' object. but I won't yet for readibility
    //console.log(p.test(pathname));
    // this p.test(new URL(event.url).pathname) will return records that match both the wildcards above, surveyId and choice,
    // otherwise it will return NULL
    // so if match here does exist, that means it MUST have the surveyId and the choice
    // vid:180 I need to remove undefined elements. this 'compact' underscore does that
    // I need to remove duplicate votes. uniqby removes votes that have a dup email or surveyId
    // const events = _.chain(req.body)
    _.chain(req.body)
      .map(({ email, url }) => {
        const match = p.test(new URL(url).pathname);
        if (match) {
          return { email, surveyId: match.surveyId, choice: match.choice };
        }
      })
      .compact()
      .uniqBy('email', 'surveyId')
      .each(({ surveyId, email, choice }) => {
        Survey.updateOne({
          _id: surveyId,
          recipients: {
            $elemMatch: { email: email, responded: false }
          }
        }, {
          $inc: { [choice]: 1 },
          $set: { 'recipients.$.responded': true },
          lastResponded: new Date()
        }).exec();
      })
      .value() // .value is mandatory, to return the final array from your chain

    // *** IMPORTANT: this console.log(events) shows you what is being returned from sendgrid, after the user
    // has clicked on their survey: email, surveyId, choice....that I will then be using to query the Mongo DB
    //console.log(events);  *** the chain above was assigned to a variable called 'events'
    // sendgrid thinks the requests are failing and will keep outputting in the terminal, until you send a  response
    res.send({});



  });

  app.post('/api/surveys', requireLogin, requireCredits, async (req, res) => {
    const { title, subject, body, recipients } = req.body;

    const survey = new Survey({
      title,
      subject,
      body,
      recipients: recipients.split(',').map(email => ({ email: email.trim() })),
      _user: req.user.id,
      dateSent: Date.now()
    });

    // send an email off to the Sengrid api by calling the send function on the Mailer parent class, and then after the async send finishes,
    // save to db. whenever you call save on req.user, that user is now 'stale', so have to create a new user variable
    const mailer = new Mailer(survey, surveyTemplate(survey));

    try {
      await mailer.send();
      await survey.save();
      req.user.credits -= 1;
      const user = await req.user.save();

      // send back the updated user
      res.send(user);
    } catch (err) {
      res.status(422).send(err);
    }
  });
};



// title, subject here is really title: title, subject: subject. new es6 syntax you can condense it
// down to one word.
// also doing the same for the mapped 'email' object, but to explicitly say that it's an object, wrap
// it in parentheses. trim() just removes whitespace if someone accidentally added some

// the _user means there it is a relationship property. the survey belongs to this user. and the
// req.user.id is generated by mongoose and mongo
